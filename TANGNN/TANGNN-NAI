from sklearn.metrics import f1_score
import torch
import torch.nn.functional as F
from torch_geometric.datasets import Planetoid
from torch_geometric.loader import DataLoader
from torch_geometric.nn import SAGEConv, GATConv, global_mean_pool
import torch.nn as nn
from torch.optim import Adam
from torch_geometric.utils import from_networkx, to_networkx
import networkx as nx
from torch_geometric.datasets import ZINC
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score
from sklearn.preprocessing import label_binarize
from torch.nn.functional import one_hot

class GraphSAGENet(nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels):
        super(GraphSAGENet, self).__init__()
        self.conv1 = SAGEConv(in_channels, hidden_channels)
        self.conv2 = SAGEConv(hidden_channels, out_channels)
        self.dropout = nn.Dropout(p=0.3)  # 添加Dropout

    def forward(self, x, edge_index):
        x = F.relu(self.conv1(x, edge_index))
        x = self.dropout(x)  # 应用Dropout
        x = self.conv2(x, edge_index)
        return F.log_softmax(x, dim=1)


    def sample_neighbors(self, edge_index, num_nodes):
        # 这是一个非常简化的邻居采样实现，仅用于示例
        sampled_edges = []
        for node in range(num_nodes):
            neighbors = edge_index[1][edge_index[0] == node]
            if len(neighbors) > self.sample_size:
                neighbors = neighbors[torch.randperm(len(neighbors))[:self.sample_size]]
            for neighbor in neighbors:
                sampled_edges.append([node, neighbor.item()])
        return torch.tensor(sampled_edges).t().contiguous()


class TransformerLayer(nn.Module):
    def __init__(self, embedding_dim, num_heads):
        super(TransformerLayer, self).__init__()
        self.multihead_attn = nn.MultiheadAttention(embed_dim=embedding_dim, num_heads=num_heads, batch_first=True)
        self.layer_norm1 = nn.LayerNorm(embedding_dim)
        self.feed_forward = nn.Sequential(
            nn.Linear(embedding_dim, embedding_dim * 4),
            nn.ReLU(),
            nn.Linear(embedding_dim * 4, embedding_dim)
        )
        self.layer_norm2 = nn.LayerNorm(embedding_dim)

    def forward(self, x):
        attn_output, _ = self.multihead_attn(x, x, x)
        x = self.layer_norm1(attn_output + x)
        ff_output = self.feed_forward(x)
        x = self.layer_norm2(ff_output + x)
        return x

class MultiLayerTransformer(nn.Module):
    def __init__(self, embedding_dim, num_heads, num_layers):
        super(MultiLayerTransformer, self).__init__()
        self.layers = nn.ModuleList([
            TransformerLayer(embedding_dim, num_heads) for _ in range(num_layers)
        ])

    def forward(self, x):
        for i, layer in enumerate(self.layers):
            x = layer(x)
            print(f"Transformer - After Layer {i+1} output shape:", x.shape)  # 打印每一层输出形状
        return x


class CustomGNN(nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, num_heads, num_layers, m, num_nodes):
        super(CustomGNN, self).__init__()
        self.num_layers = num_layers
        self.m = m
        self.num_nodes = num_nodes

        self.a = nn.Parameter(torch.randn(hidden_channels, 1))
        # 初始化GraphSAGENet和Transformer层的ModuleList
        self.graphsage_layers = nn.ModuleList()
        self.transformer_layers = nn.ModuleList()

        # 第一层
        self.graphsage_layers.append(GraphSAGENet(in_channels, hidden_channels, hidden_channels))
        self.transformer_layers.append(MultiLayerTransformer(hidden_channels, num_heads, 1))

        # 后续层
        for _ in range(1, self.num_layers):
            self.graphsage_layers.append(
                GraphSAGENet(hidden_channels * 2, hidden_channels, hidden_channels))
            self.transformer_layers.append(MultiLayerTransformer(hidden_channels, num_heads, 1))

        self.final_lin = nn.Linear(hidden_channels * 2, out_channels)
        self.mlp = nn.Sequential(
            nn.Linear(hidden_channels * 2, hidden_channels * 2),
            nn.ReLU(),
            nn.Linear(hidden_channels * 2, out_channels)
        )
    def forward(self, data):
        x, edge_index = data.x, data.edge_index

        for i in range(self.num_layers):
            # 对GraphSAGE层处理
            sage_out = self.graphsage_layers[i](x, edge_index)

            # 对Transformer层处理, 保持transformer的输入是基于top_m_sampling的采样特征
            adjusted_x = sage_out  # 为了和GraphSAGE的输出维度对齐
            transformer_input = self.top_m_sampling(adjusted_x, self.m)
            transformer_out = self.transformer_layers[i](transformer_input)
            transformer_out = transformer_out.mean(dim=1)  # 假设需要聚合Transformer的输出
            transformer_out_expanded = transformer_out.expand(sage_out.size(0), -1)

            # 特征拼接，作为下一层GraphSAGE的输入
            x = torch.cat([sage_out, transformer_out_expanded], dim=1)

        out = self.mlp(x)
        return F.log_softmax(out, dim=1)

    def top_m_sampling(self, node_embeddings, m):
        num_nodes, _ = node_embeddings.size()
        a_expanded = self.a
        # 确保不超过实际的节点数量
        m_adjusted = min(m, num_nodes)
        pos_similarity = self.cosine_similarity(F.relu(node_embeddings), a_expanded)
        print(f"pos_similarity size: {pos_similarity.size(0)}")
        print(f"m_adjusted: {m_adjusted}")

        # 检查以避免"selected index k out of range"错误
        if pos_similarity.size(0) < m_adjusted:
            print("Warning: pos_similarity size is less than m_adjusted.")
            m_adjusted = pos_similarity.size(0)  # 调整m_adjusted以避免错误

        if m_adjusted == 0:  # 如果m_adjusted为0，直接返回一个空的张量
            print("Warning: m_adjusted is 0, returning empty tensor.")
            return torch.empty((0, node_embeddings.size(1)))
        _, top_indices = torch.topk(pos_similarity.squeeze(), m_adjusted, largest=True)
        sampled_features = node_embeddings[top_indices]

        return sampled_features.unsqueeze(0)

    def find_common_indices(self, indices1, indices2, m):
        # 确保indices1和indices2是一维的并且在同一设备上
        indices1_flat = indices1.view(-1).to(indices2.device)
        indices2_flat = indices2.view(-1)
        # 找到交集
        common_indices, indices1_common_idx = torch.unique(torch.cat((indices1_flat, indices2_flat), dim=0),
                                                           sorted=False, return_inverse=True)[:2]
        indices1_counts = torch.bincount(indices1_common_idx[:len(indices1_flat)])
        indices2_counts = torch.bincount(indices1_common_idx[len(indices1_flat):])
        mask = (indices1_counts > 0) & (indices2_counts > 0)
        common = common_indices[mask]
        if len(common) < m:
            extra_from_indices1 = indices1_flat[~mask[:len(indices1_flat)]][:m - len(common)]
            common = torch.cat([common, extra_from_indices1])
        if len(common) < m:
            extra_from_indices2 = indices2_flat[~mask[len(indices1_flat):]][:m - len(common)]
            common = torch.cat([common, extra_from_indices2])

        # 如果共同元素超过m个，只取前m个
        return common[:m]

    def cosine_similarity(self, node_embeddings, a):
        # 动态调整a的形状以匹配node_embeddings的特征维度
        # 但由于直接扩展a的大小可能会遇到问题，我们考虑使用不同的策略

        # 确保node_embeddings是二维的，形状为[节点数, 特征数]
        if node_embeddings.dim() == 3:
            # 如果是三维的，假设形状为[批次大小, 节点数, 特征数]，则合并批次和节点维度
            node_embeddings = node_embeddings.view(-1, node_embeddings.size(-1))

        # 获取node_embeddings的特征维度
        feature_dim = node_embeddings.size(1)

        if a.size(0) != feature_dim:
            a_expanded = torch.ones((feature_dim, 1), device=node_embeddings.device)
        else:
            a_expanded = a

        # 对a进行归一化
        a_expanded_norm = F.normalize(a_expanded, p=2, dim=0)

        # 对节点嵌入进行归一化
        node_embeddings_norm = F.normalize(node_embeddings, p=2, dim=1)

        # 执行矩阵乘法
        similarity = torch.mm(node_embeddings_norm, a_expanded_norm)

        return similarity

    def update_a(self, x_bar):
        # 假设 x_bar 已经是所有节点特征的平均值
        # 首先移除 a 在 x_bar 方向上的成分
        projection = (self.a.T @ x_bar).squeeze()  # 计算 a 在 x_bar 方向上的投影
        a_minus_projection = self.a - (projection * x_bar)  # 移除投影

        # 然后对 a 执行 L2 范数正则化，得到更新后的 a
        a_new = F.normalize(a_minus_projection, p=2, dim=0)  # 使用 L2 范数进行正则化
        with torch.no_grad():
            self.a.copy_(a_new)
# 加载Cora数据集
dataset = Planetoid(root='data/PubMed', name='PubMed')
loader = DataLoader(dataset, batch_size=128, shuffle=True)

# Initialize model and optimizer
model = CustomGNN(
    in_channels=dataset.num_node_features,
    hidden_channels=32,
    out_channels=dataset.num_classes,
    num_heads=1,
    num_layers=2,
    m=25,
    num_nodes=dataset[0].num_nodes
)
optimizer = Adam(model.parameters(), lr=0.005, weight_decay=1e-4)

model.train()
for epoch in range(80):
    optimizer.zero_grad()
    out = model(dataset[0])
    loss = F.nll_loss(out[dataset[0].train_mask], dataset[0].y[dataset[0].train_mask])
    loss.backward()
    optimizer.step()
    if epoch % 10 == 0:
        print(f"Epoch {epoch+1}, Loss: {loss.item()}")


model.eval()
with torch.no_grad():
    logits = model(dataset[0])  # Get logits from your model
    probs = F.softmax(logits, dim=1)  # Convert logits to probabilities

# Prepare labels
true_labels = dataset[0].y[dataset[0].test_mask].cpu().numpy()
# Convert true labels to one-hot encoding
y_true_one_hot = one_hot(dataset[0].y[dataset[0].test_mask]).cpu().numpy()

# Get predicted probabilities for the test mask
y_pred_probs = probs[dataset[0].test_mask].cpu().numpy()

# Calculate ROC AUC
roc_auc = roc_auc_score(y_true_one_hot, y_pred_probs, multi_class='ovr', average='macro')  # 'ovr' stands for One-vs-Rest
print(f"Macro ROC AUC: {roc_auc}")

# Calculate ROC AUC
